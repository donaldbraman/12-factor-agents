#!/usr/bin/env python3
"""
Sparky PR Monitor

Monitors for PRs created by Sparky and generates LOUD alerts for human review.
When Sparky attempts self-improvement, humans MUST review with extreme care.
"""

import json
import subprocess
import time
import sys
from datetime import datetime
from pathlib import Path
from typing import List, Dict


class SparkyPRMonitor:
    """Monitors for Sparky-generated PRs and creates urgent review alerts"""

    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.alert_file = self.base_dir / "SPARKY_PR_ALERTS.md"
        self.last_check_file = self.base_dir / ".sparky_last_check"

        # Sparky identifiers
        self.sparky_indicators = [
            "🤖 Generated with",
            "Generated by: SmartIssueAgent",
            "Self-improvement PR",
            "Automated fix by Sparky",
            "Quality flywheel",
            "Co-Authored-By: Claude",
        ]

    def get_recent_prs(self) -> List[Dict]:
        """Get recent PRs from GitHub"""
        try:
            # Get PRs from last 24 hours
            cmd = [
                "gh",
                "pr",
                "list",
                "--json",
                "number,title,body,author,createdAt,url",
                "--limit",
                "20",
            ]
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)

            prs = json.loads(result.stdout)
            return prs

        except subprocess.CalledProcessError as e:
            print(f"❌ Error fetching PRs: {e}")
            return []

    def is_sparky_pr(self, pr: Dict) -> bool:
        """Check if PR was created by Sparky"""
        title = pr.get("title", "").lower()
        body = pr.get("body", "")

        # Check for Sparky indicators
        for indicator in self.sparky_indicators:
            if indicator.lower() in title or indicator in body:
                return True

        # Check if author is the repo owner (Sparky uses gh CLI)
        author = pr.get("author", {}).get("login", "")
        if author == "donaldbraman":  # Sparky uses your GitHub CLI
            # Additional checks for automated content
            if any(
                keyword in title
                for keyword in ["fix", "improve", "update", "automated"]
            ):
                return True

        return False

    def create_urgent_alert(self, sparky_prs: List[Dict]):
        """Simple alert for Claude Code - just what I need"""
        if not sparky_prs:
            return

        print("🚨 SPARKY PR ALERT 🚨")
        print(f"Found {len(sparky_prs)} Sparky self-improvement PR(s)")

        for pr in sparky_prs:
            print(f"🤖 PR #{pr['number']}: {pr['title']}")
            print(f"   {pr['url']}")
            print("   ⚠️ REVIEW WITH EXTREME CARE - SELF-MODIFYING AI")

        print("🚨 END ALERT 🚨")

    def update_last_check(self):
        """Update the last check timestamp"""
        with open(self.last_check_file, "w") as f:
            f.write(datetime.now().isoformat())

    def get_last_check(self) -> datetime:
        """Get the last check timestamp"""
        try:
            if self.last_check_file.exists():
                with open(self.last_check_file, "r") as f:
                    return datetime.fromisoformat(f.read().strip())
            else:
                # If no previous check, start from 1 hour ago
                return datetime.now().replace(hour=datetime.now().hour - 1)
        except Exception:
            return datetime.now().replace(hour=datetime.now().hour - 1)

    def scan_for_sparky_prs(self):
        """Scan for new Sparky PRs since last check"""
        print("🔍 Scanning for Sparky PRs...")

        recent_prs = self.get_recent_prs()
        if not recent_prs:
            print("ℹ️  No recent PRs found")
            return

        # Filter for Sparky PRs
        sparky_prs = []
        for pr in recent_prs:
            if self.is_sparky_pr(pr):
                sparky_prs.append(pr)

        if sparky_prs:
            print(f"🤖 Found {len(sparky_prs)} Sparky PR(s)")
            self.create_urgent_alert(sparky_prs)
        else:
            print("✅ No Sparky PRs found")

        self.update_last_check()

    def watch_for_sparky_prs(self, interval: int = 60):
        """Continuously watch for Sparky PRs"""
        print(f"👀 Watching for Sparky PRs every {interval} seconds...")
        print("⚠️  Will generate URGENT alerts when Sparky creates PRs")
        print("Press Ctrl+C to stop")

        try:
            while True:
                self.scan_for_sparky_prs()
                time.sleep(interval)
        except KeyboardInterrupt:
            print("\\n🛑 Stopping Sparky PR monitor")


def main():
    """Main execution function"""
    monitor = SparkyPRMonitor()

    if len(sys.argv) > 1 and sys.argv[1] == "--watch":
        # Continuous monitoring
        interval = int(sys.argv[2]) if len(sys.argv) > 2 else 60
        monitor.watch_for_sparky_prs(interval)
    else:
        # One-time scan
        monitor.scan_for_sparky_prs()


if __name__ == "__main__":
    main()
