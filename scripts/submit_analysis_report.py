#!/usr/bin/env python3
"""
Analysis Report Submission System

Submits telemetry analysis reports as GitHub issues to track and address
system improvements identified by the quality flywheel.
"""

import sys
import json
import subprocess
from datetime import datetime
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.telemetry_learner import TelemetryPatternLearner  # noqa: E402


def create_analysis_issue(insights: dict) -> str:
    """Create a GitHub issue from telemetry analysis insights"""

    # Count findings
    failure_count = len(insights["failure_patterns"])
    success_count = len(insights["success_patterns"])
    fix_count = len(insights["fix_mappings"])
    rec_count = len(insights["recommendations"])

    # Generate issue title
    if failure_count > 0:
        title = f"Quality Analysis: {failure_count} failure patterns detected"
    elif rec_count > 0:
        title = f"Quality Analysis: {rec_count} improvement recommendations"
    else:
        title = "Quality Analysis: System health check"

    # Generate issue body
    body = f"""# Automated Quality Analysis Report

Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Source: Telemetry Pattern Learner

## Summary
- 🔍 Failure patterns found: {failure_count}
- ✅ Success patterns found: {success_count}  
- 🔧 Fix mappings discovered: {fix_count}
- 📝 Recommendations generated: {rec_count}

"""

    # Add failure patterns
    if failure_count > 0:
        body += "## 🚨 Failure Patterns Detected\n\n"
        for pattern in insights["failure_patterns"]:
            body += f"### {pattern.pattern}\n"
            body += f"- **Failure rate**: {pattern.failure_rate*100:.1f}%\n"
            body += f"- **Occurrences**: {pattern.failure_count}\n"
            body += f"- **Suggested fix**: {pattern.suggested_fix}\n"
            if pattern.common_errors:
                body += f"- **Common errors**: {', '.join(pattern.common_errors[:2])}\n"
            body += "\n"

    # Add success patterns
    if success_count > 0:
        body += "## ✅ Success Patterns Identified\n\n"
        for pattern in insights["success_patterns"]:
            body += f"### {pattern.pattern}\n"
            body += f"- **Success rate**: {pattern.success_rate*100:.1f}%\n"
            body += f"- **Occurrences**: {pattern.success_count}\n"
            body += f"- **Key elements**: {', '.join(pattern.key_elements)}\n"
            body += "\n"

    # Add recommendations
    if rec_count > 0:
        body += "## 📝 Actionable Recommendations\n\n"
        for i, rec in enumerate(insights["recommendations"], 1):
            body += f"{i}. {rec}\n"
        body += "\n"

    body += """## Next Steps

This report was automatically generated by the quality flywheel system. 
The patterns and recommendations should be reviewed and potentially 
implemented to improve system reliability and code quality.

---
*Generated by: Quality Flywheel Telemetry Analysis*
"""

    return title, body


def submit_issue(title: str, body: str, labels: list = None) -> bool:
    """Submit the issue to GitHub"""

    try:
        # Create the issue using GitHub CLI (skip labels for now)
        cmd = ["gh", "issue", "create", "--title", title, "--body", body]

        # TODO: Add labels once they exist in the repo
        # for label in labels:
        #     cmd.extend(["--label", label])

        result = subprocess.run(cmd, capture_output=True, text=True, check=True)

        # Extract issue URL from output
        issue_url = result.stdout.strip()
        print(f"✅ Analysis report submitted: {issue_url}")
        return True

    except subprocess.CalledProcessError as e:
        print(f"❌ Failed to create issue: {e}")
        print(f"Error output: {e.stderr}")
        return False


def main():
    """Main execution function"""
    print("🔍 Running telemetry analysis...")

    # Run analysis
    learner = TelemetryPatternLearner()
    insights = learner.analyze_telemetry(days_back=7)

    # Check if we have meaningful insights
    total_findings = (
        len(insights["failure_patterns"])
        + len(insights["success_patterns"])
        + len(insights["recommendations"])
    )

    if total_findings == 0:
        print("ℹ️  No significant patterns found. Skipping report submission.")
        return

    print(f"📊 Found {total_findings} items to report")

    # Create and submit issue
    title, body = create_analysis_issue(insights)

    print(f"📝 Creating issue: {title}")

    # Determine labels based on content
    labels = ["quality-analysis", "telemetry", "automated"]
    if len(insights["failure_patterns"]) > 0:
        labels.append("bug")
    if len(insights["success_patterns"]) > 0:
        labels.append("enhancement")

    success = submit_issue(title, body, labels)

    if success:
        print("🎉 Quality analysis report submitted successfully!")

        # Save report locally for reference
        report_file = (
            Path("reports")
            / f"analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        )
        report_file.parent.mkdir(exist_ok=True)

        with open(report_file, "w") as f:
            json.dump(
                {
                    "timestamp": datetime.now().isoformat(),
                    "title": title,
                    "insights": {
                        "failure_patterns": [
                            {
                                "pattern": p.pattern,
                                "failure_rate": p.failure_rate,
                                "failure_count": p.failure_count,
                                "suggested_fix": p.suggested_fix,
                            }
                            for p in insights["failure_patterns"]
                        ],
                        "success_patterns": [
                            {
                                "pattern": p.pattern,
                                "success_rate": p.success_rate,
                                "success_count": p.success_count,
                                "key_elements": p.key_elements,
                            }
                            for p in insights["success_patterns"]
                        ],
                        "recommendations": insights["recommendations"],
                    },
                },
                f,
                indent=2,
            )

        print(f"💾 Report saved locally: {report_file}")
    else:
        print("❌ Failed to submit report")


if __name__ == "__main__":
    main()
