#!/usr/bin/env python3
"""
Claude's Sparky PR Auto-Reviewer

Background process for Claude Code to automatically review and handle
Sparky's self-improvement PRs when they're safe and straightforward.
Escalates to human only for complex/risky changes.
"""

import json
import subprocess
import time
import sys
from pathlib import Path
from typing import List, Dict, Optional


class ClaudeSparkyReviewer:
    """Claude's automated reviewer for Sparky PRs"""

    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.last_check_file = self.base_dir / ".claude_sparky_check"

        # Simple patterns to identify Sparky PRs
        self.sparky_indicators = [
            "🤖 Generated with",
            "Co-Authored-By: Claude",
            "Generated by: SmartIssueAgent",
        ]

        # Safe auto-merge criteria
        self.safe_patterns = [
            "fix: method signature",
            "fix: parameter mismatch",
            "fix: routing logic",
            "add: missing parameter",
            "update: method signature",
        ]

        # Require human review
        self.complex_patterns = [
            "refactor:",
            "breaking:",
            "security:",
            "core architecture",
            "fundamental change",
        ]

    def get_sparky_prs(self) -> List[Dict]:
        """Get open PRs that look like Sparky's work"""
        try:
            cmd = [
                "gh",
                "pr",
                "list",
                "--json",
                "number,title,body,url,author",
                "--state",
                "open",
            ]
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)

            all_prs = json.loads(result.stdout)
            sparky_prs = []

            for pr in all_prs:
                if self.is_sparky_pr(pr):
                    sparky_prs.append(pr)

            return sparky_prs

        except subprocess.CalledProcessError:
            return []

    def is_sparky_pr(self, pr: Dict) -> bool:
        """Check if this is a Sparky PR"""
        body = pr.get("body", "")

        return any(indicator in body for indicator in self.sparky_indicators)

    def analyze_pr_safety(self, pr: Dict) -> str:
        """Determine if PR is safe for auto-merge"""
        title = pr.get("title", "").lower()

        # Check for complex changes that need human review
        if any(pattern in title for pattern in self.complex_patterns):
            return "complex"

        # Check for safe patterns
        if any(pattern in title for pattern in self.safe_patterns):
            return "safe"

        # Default to review for unknown patterns
        return "review"

    def get_pr_diff(self, pr_number: int) -> Optional[str]:
        """Get the diff for a PR to analyze changes"""
        try:
            cmd = ["gh", "pr", "diff", str(pr_number)]
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            return result.stdout
        except subprocess.CalledProcessError:
            return None

    def is_diff_safe(self, diff: str) -> bool:
        """Quick check if diff looks safe for auto-merge"""
        if not diff:
            return False

        lines = diff.split("\n")

        # Count changes
        additions = sum(
            1 for line in lines if line.startswith("+") and not line.startswith("+++")
        )
        deletions = sum(
            1 for line in lines if line.startswith("-") and not line.startswith("---")
        )

        # Small changes are safer
        if additions + deletions > 50:
            return False

        # Check for risky patterns in diff
        risky_patterns = [
            "import ",
            "class ",
            "def __init__",
            "subprocess",
            "exec",
            "eval",
        ]
        for line in lines:
            if any(pattern in line for pattern in risky_patterns):
                return False

        return True

    def auto_merge_pr(self, pr: Dict) -> bool:
        """Attempt to auto-merge a safe PR"""
        pr_number = pr["number"]

        try:
            # Merge the PR
            cmd = ["gh", "pr", "merge", str(pr_number), "--squash", "--delete-branch"]
            subprocess.run(cmd, check=True, capture_output=True)

            print(f"✅ Auto-merged PR #{pr_number}: {pr['title']}")
            return True

        except subprocess.CalledProcessError as e:
            print(f"❌ Failed to merge PR #{pr_number}: {e}")
            return False

    def escalate_to_human(self, pr: Dict, reason: str):
        """Escalate complex PR to human review"""
        print(f"🔄 Escalating PR #{pr['number']} to human: {reason}")
        print(f"   Title: {pr['title']}")
        print(f"   URL: {pr['url']}")
        print(f"   Reason: {reason}")

    def review_sparky_prs(self):
        """Main review loop for Sparky PRs"""
        sparky_prs = self.get_sparky_prs()

        if not sparky_prs:
            return

        print(f"🤖 Found {len(sparky_prs)} Sparky PR(s) to review")

        for pr in sparky_prs:
            pr_number = pr["number"]
            safety = self.analyze_pr_safety(pr)

            if safety == "complex":
                self.escalate_to_human(pr, "Complex changes detected")
                continue

            if safety == "safe":
                # Get diff to double-check
                diff = self.get_pr_diff(pr_number)

                if diff and self.is_diff_safe(diff):
                    # Safe to auto-merge
                    self.auto_merge_pr(pr)
                else:
                    self.escalate_to_human(pr, "Diff analysis failed safety check")
            else:
                self.escalate_to_human(pr, "Unknown pattern - needs review")

    def watch_sparky_prs(self, interval: int = 120):
        """Watch for Sparky PRs every 2 minutes"""
        print("👀 Claude watching for Sparky PRs...")

        try:
            while True:
                self.review_sparky_prs()
                time.sleep(interval)
        except KeyboardInterrupt:
            print("\n🛑 Claude Sparky reviewer stopped")


def main():
    reviewer = ClaudeSparkyReviewer()

    if len(sys.argv) > 1 and sys.argv[1] == "--watch":
        interval = int(sys.argv[2]) if len(sys.argv) > 2 else 120
        reviewer.watch_sparky_prs(interval)
    else:
        reviewer.review_sparky_prs()


if __name__ == "__main__":
    main()
